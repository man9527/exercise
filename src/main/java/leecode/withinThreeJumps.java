package leecode;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Stack;

public class withinThreeJumps {

    public static void main(String[] args) {
        int[] a = {679,64,377,161,556,131,706,634,347,165,222,589,683,626,697,177,86,246,818,677,855,744,53,641,280,285,398,751,474,259,413,370,653,112,303,392,104,768,75,684,321,732,258,56,377,800,380,19,772,388,481,342,83,809,215,195,95,563,769,329,147,552,475,465,821,209,854,520,754,671,308,763,647,655,272,213,169,338,6,434,758,52,742,751,695,231,96,699,541,120,515,234,497,750,419,57,384,770,338,299,167,225,103,771,638,374,527,53,546,132,50,651,437,274,620,797,758,194,762,707,767,195,607,738,186,490,642,350,53,45,326,207,314,539,843,850,728,181,82,257,6,618,829,48,748,192,340,308,721,767,595,590,646,522,511,608,654,348,29,168,689,112,92,479,123,157,353,417,229,518,556,299,392,64,281,873,815,451,761,803,311,26,269,564,293,503,806,117,562,442,817,805,859,574,328,717,602,582,497,399,841,316,221,377,203,566,475,273,308,489,270,361,461,664,701,212,848,743,81,262,81,865,142,208,550,493,221,193,769,448,848,696,219,19,608,448,408,480,615,102,14,167,207,18,503,276,815,144,282,735,666,353,498,379,543,66,866,347,553,741,363,382,560,93,847,309,865,711,380,154,628,524,83,281,708,84,14,288,741,730,129,603,758,513,627,42,604,467,131,860,28,366,62,285,561,238,380,842,772,247,212,175,594,376,35,119,8,721,78,43,190,525,110,714,847,622,6,758,237,83,807,848,695,419,88,392,94,311,122,462,351,40,635,319,832,698,414,568,866,490,268,93,167,773,492,316,4,231,555,84,81,843,256,552,473,262,245,124,390,209,658,576,347,136,779,388,546,719,739,522,250,820,402,658,80,817,513,652,560,579,61,675,621,844,454,58,537,763,664,105,300,467,668,509,694,645,499,158,56,210,678,385,527,753,447,54,755,149,439,96,228,823,839,571,742,749,211,569,465,410,846,329,663,111,343,310,779,255,763,218,406,151,626,713,325,844,219,342,813,827,867,764,856,844,193,587,842,13,147,422,166,72,835,457,722,67,112,663,624,432,70,521,558,314,252,249,260,137,168,232,207,112,704,157,247,675,133,119,682,83,731,339,92,860,610,481,440,629,167,740,99,740,264,602,591,321,343,32,318,540,22,426,181,61,548,390,160,590,107,72,354,505,531,13,633,234,699,545,418,186,63,262,406,414,718,505,432,819,264,465,242,528,712,511,689,560,665,713,631,230,286,540,800,492,408,76,492,90,118,553,531,390,866,242,146,766,168,639,554,642,711,443,407,349,304,402,745,558,292,135,400,350,208,766,843,466,590,222,364,423,269,344,592,417,380,397,127,640,702,565,490,834,89,371,165,226,35,560,781,424,572,621,681,108,43,57,156,124,278,387,396,683,167,607,478,560,65,385,219,865,576,300,712,138,145,804,767,408,594,812,206,464,743,697,787,654,596,586,492,670,576,86,409,383,429,700,394,86,833,406,838,372,124,673,272,561,69,92,206,244,290,745,417,566,285,577,574,358,289,393,346,142,201,129,463,242,464,134,216,162,643,509,496,780,622,41,125,847,253,541,609,375,599,666,339,71,492,538,229,764,408,381,594,138,347,210,857,165,405,802,543,447,799,502,90,143,261,18,590,861,849,806,59,238,704,646,13,312,449,313,484,244,642,253,125,444,519,87,385,85,145,464,73,841,225,828,276,562,800,710,478,132,18,173,200,386,331,27,597,631,665,267,169,820,135,518,210,35,550,328,222,781,691,140,190,522,619,26,202,483,340,233,503,667,56,12,775,739,412,235,381,523,531,525,499,295,326,485,216,445,518,779,821,348,578,695,859,264,28,681,130,740,728,530,349,817,87,486,18,99,281,616,40,686,159,578,303,388,271,182,541,739,650,652,734,137,421,43,536,119,545,459,475,655,852,111,338,358,656,640,780,528,388,844,98,614,781,552,402,650,622,669,553,525,58,276,502,295,506,407,848,76,216,675,625};
        int[] b = {170,327,741,50,718,411,780,631,615,861,708,780,518,544,481,19,434,129,543,302,835,452,249,47,186,312,186,691,619,702,523,379,569,265,804,618,853,273,99,196,123,183,311,799,511,4,522,457,469,362,701,831,343,427,654,201,206,128,551,226,764,53,763,172,368,490,867,406,392,158,587,475,247,60,255,526,538,93,144,127,140,499,459,94,463,151,595,845,95,336,532,79,383,680,287,71,392,591,662,849,445,266,688,588,418,522,714,571,797,11,858,257,498,838,43,235,567,536,670,59,81,713,622,694,79,45,443,263,261,307,642,212,700,78,444,595,217,306,354,429,457,74,831,81,696,559,615,229,180,110,188,57,545,10,196,46,212,531,106,298,319,491,145,806,126,670,354,8,823,711,225,230,679,447,129,737,126,48,82,256,336,179,621,280,753,235,228,419,512,869,625,846,274,9,500,20,162,253,66,334,71,82,655,646,151,88,417,583,473,630,482,470,650,234,491,708,692,49,5,662,465,336,570,102,862,197,564,253,650,690,560,211,495,110,68,629,35,36,584,847,256,850,202,177,405,705,307,781,502,194,108,433,192,287,718,482,42,312,396,74,406,193,522,573,804,496,148,460,374,608,62,281,375,855,495,494,1,602,341,88,171,687,789,332,55,480,515,272,390,335,123,133,145,231,145,149,427,700,677,266,493,128,757,112,133,460,53,637,79,838,318,603,715,430,789,411,265,521,828,443,168,93,285,837,828,372,256,354,303,31,626,812,41,751,352,359,39,201,128,850,254,333,417,648,852,798,359,482,219,169,620,243,201,834,132,603,151,730,177,220,648,91,651,476,573,320,753,589,269,859,857,830,202,570,365,537,636,300,385,117,127,297,757,645,198,65,119,714,430,390,340,859,348,670,686,110,385,509,126,340,851,257,298,820,412,381,38,645,141,705,331,395,352,270,204,413,21,481,65,463,633,429,459,340,11,746,32,629,155,123,376,445,301,531,818,429,168,768,734,17,776,39,689,494,138,481,700,128,253,463,336,257,360,719,93,255,183,21,371,654,411,355,62,533,307,380,83,471,746,258,185,386,298,159,353,619,724,775,729,699,755,473,750,745,24,194,704,424,688,668,41,313,866,494,213,79,260,102,372,74,250,245,654,316,292,361,297,342,88,278,763,78,843,643,13,103,495,477,103,209,713,549,421,851,299,372,746,854,186,716,707,837,741,43,660,664,569,269,773,831,340,15,160,533,772,168,480,249,828,501,625,783,565,88,241,166,745,548,66,673,263,769,349,709,718,654,715,868,570,535,522,300,335,75,748,17,250,446,462,322,231,138,564,153,789,737,397,376,18,69,624,826,124,318,855,806,186,604,301,519,589,391,277,311,827,607,529,707,102,191,84,7,778,466,25,457,245,598,584,737,545,760,41,788,823,533,701,739,181,326,324,321,854,490,442,436,669,344,369,647,823,17,281,587,803,569,798,93,834,336,342,262,230,795,767,276,635,204,87,839,709,184,660,741,389,366,88,485,223,400,587,262,132,384,784,87,539,169,365,719,149,679,633,828,626,730,815,427,702,109,508,715,180,609,71,734,299,369,493,31,93,293,301,222,362,551,297,664,642,101,517,732,486,61,121,182,421,6,493,477,87,698,502,218,831,612,575,766,482,428,640,154,640,261,617,471,499,104,391,253,472,479,91,128,398,566,251,595,295,448,350,776,413,123,206,794,198,622,542,274,774,407,147,512,235,305,258,803,734,533,555,619,110,870,397,716,344,145,170,687,381,711,784,470,260,192,784,456,430,525,241,115,592,326,138,830,598,664,331,287,447,66,609,180,364,119,273,743,628,490,840,587,394,389,200,392,859,416,624,170,26,838,183,605,559,50,232,678,98,856,435,555,702,587,525,611,834,330,153,355,439,428,50,184,861,761,175,171,397,760,496,748,259,2,246,456,661,383,769,833,367,727,801,588,6,414,517,811,94,348,231,818,868,293,120};
        int[] c = {579,417,832,155,658,799,728,330,436,461,658,835,132,189,329,413,87,435,616,255,310,417,130,426,32,90,93,643,99,347,746,603,708,542,20,121,224,669,671,161,136,163,213,455,875,95,125,281,483,754,778,285,579,356,542,566,850,815,448,761,568,253,239,671,126,842,319,313,818,176,239,347,662,96,606,204,133,524,217,193,843,243,130,163,394,585,724,349,604,189,261,51,269,366,228,762,780,295,807,571,162,347,319,58,183,317,636,514,811,82,335,399,325,340,785,133,809,698,523,227,402,730,399,140,370,393,764,353,3,264,715,669,803,701,590,637,39,554,41,794,588,150,847,211,168,582,449,591,495,531,418,590,240,337,522,840,135,765,386,253,134,603,784,839,462,31,672,559,236,381,247,209,710,601,127,362,797,266,269,513,808,69,344,141,355,261,231,277,252,11,411,724,650,51,243,372,26,875,246,592,365,489,205,791,518,675,292,163,736,195,669,689,420,506,299,57,741,546,455,318,379,617,165,520,87,211,316,376,628,759,589,481,433,454,858,831,863,155,108,828,589,149,562,487,385,79,701,396,366,296,793,143,23,236,180,690,63,696,234,144,529,77,205,691,30,483,676,523,212,119,32,313,148,58,372,303,550,371,190,586,494,39,32,260,112,567,656,382,384,485,735,869,468,729,372,90,430,546,210,478,292,351,99,224,322,91,761,864,703,103,58,294,92,541,397,154,63,50,767,340,524,67,659,489,64,396,771,323,438,66,160,407,51,90,282,266,116,180,404,333,299,859,304,694,30,579,192,31,410,867,715,497,199,170,745,108,843,105,146,741,365,759,114,441,251,478,225,385,45,495,839,704,392,394,772,491,544,525,284,729,660,582,154,723,330,407,224,772,673,247,409,845,372,211,381,379,716,842,382,286,384,573,740,230,439,383,765,467,362,514,817,135,384,501,555,559,152,150,319,173,686,494,607,860,769,621,545,261,155,484,789,220,771,586,376,424,225,812,521,200,504,348,34,445,838,814,306,660,496,852,652,142,19,845,117,770,361,55,42,765,445,1,544,855,125,462,565,805,867,641,128,474,181,249,221,27,324,203,874,262,685,527,304,605,287,488,218,230,424,231,207,268,294,139,648,298,800,856,220,744,8,732,305,473,504,21,495,112,10,125,167,807,676,145,649,284,233,209,199,187,545,573,385,715,313,532,591,487,836,341,247,726,604,46,266,498,109,760,126,33,520,136,135,175,668,435,282,856,507,250,70,295,252,566,734,396,565,571,16,796,750,443,826,422,121,407,820,609,591,519,372,147,306,33,345,860,135,529,186,651,729,432,388,146,97,26,205,75,305,850,253,537,815,219,239,712,335,688,609,626,676,306,111,572,868,248,212,563,150,369,225,470,279,514,769,749,874,672,527,187,866,762,464,531,671,714,417,571,461,572,48,304,511,496,120,3,267,6,661,29,670,354,112,392,528,407,21,340,511,175,259,137,231,420,139,394,592,590,516,395,438,196,12,248,663,739,544,309,392,702,535,638,144,338,194,255,375,264,779,18,196,255,738,450,217,572,367,555,219,412,323,340,837,120,435,125,796,52,106,97,663,294,365,331,671,24,489,621,797,870,188,554,481,728,128,443,469,369,550,629,307,198,263,497,328,571,48,718,119,318,217,841,738,89,835,94,306,444,75,541,299,627,796,422,17,685,161,640,659,646,421,562,407,30,517,539,358,268,838,731,225,555,783,757,36,276,635,583,667,32,808,94,163,321,228,481,625,337,268,840,433,555,737,453,8,802,241,76,383,315,840,71,146,19,766,443,446,411,450,464,292,303,804,475,252,105,158,867,475,615,518,298,732,844,839,729,17,60,97,227,583,787,204,67,598,747,857,257,513,684,329,874,797,478,650,14,668,764,356,689,119,853,257,475,22,268,129,131,314,360,510,32,20,162,461,625,310,247,20,316,288,170,78,85,633,803,604,780,220,700,349,566,351,144,427}
                ;
        int[] d = {481,712,546,470,550,410,737,448,837,22,374,65,769,647,317,793,293,347,668,152,661,297,161,644,314,460,617,854,48,801,661,108,98,866,147,127,764,530,9,377,768,589,787,392,740,416,350,253,711,309,529,470,327,170,202,157,160,415,856,72,182,846,599,190,433,252,123,87,682,60,534,25,632,852,579,381,682,195,654,33,300,858,217,872,646,118,275,385,759,134,544,70,102,674,202,780,104,665,307,354,22,295,707,76,673,816,334,785,96,367,461,777,229,212,456,321,777,94,842,271,527,724,277,78,589,108,768,698,599,160,381,121,313,233,433,185,588,249,570,846,653,196,814,442,856,635,369,165,425,590,374,664,748,126,14,138,434,570,641,752,841,531,269,659,397,686,160,335,620,819,298,834,585,545,72,152,331,828,589,636,498,290,513,419,712,22,834,838,509,525,638,636,567,314,45,285,625,171,667,94,860,629,428,385,205,287,636,794,761,431,722,851,789,562,603,473,829,405,466,380,86,519,461,764,628,822,114,271,626,857,261,714,676,474,365,645,371,195,774,476,297,287,45,648,761,2,233,162,872,724,378,315,429,858,444,438,582,592,69,773,661,387,594,100,642,600,145,463,522,498,746,563,172,35,395,500,689,459,17,335,768,277,533,597,722,247,288,466,13,60,708,350,54,447,456,773,607,53,46,20,247,702,175,433,679,127,173,158,126,135,326,329,682,173,650,61,569,743,417,542,711,782,839,32,335,518,54,639,573,828,588,791,252,73,108,184,514,682,735,575,132,398,508,116,149,102,690,19,510,659,444,205,29,660,384,128,829,449,16,468,480,309,298,422,128,348,652,853,757,707,572,235,741,808,60,874,692,781,855,183,59,694,792,25,238,371,686,399,440,595,155,790,329,797,88,298,579,399,707,4,587,412,468,3,301,500,561,735,488,544,143,593,239,36,680,810,833,837,401,280,242,500,136,145,452,156,236,296,322,125,775,422,207,157,752,112,683,301,632,1,184,195,505,88,82,739,50,111,194,504,478,319,15,342,256,25,458,777,387,52,544,630,150,458,548,458,66,640,718,311,496,787,583,694,152,370,219,245,354,485,350,775,358,520,834,629,569,721,679,436,336,712,354,546,689,363,62,15,794,71,351,1,525,289,583,526,73,758,556,606,658,359,164,184,205,469,728,665,106,619,243,166,602,161,63,12,420,627,71,217,791,538,337,827,458,710,111,736,317,812,849,531,181,541,5,439,336,169,289,475,279,402,356,456,588,508,138,767,716,235,388,158,297,220,141,26,365,31,689,293,515,245,521,717,615,332,396,75,824,562,261,326,28,206,628,590,332,32,803,324,481,71,583,835,98,768,430,808,770,456,102,154,628,366,686,442,787,539,831,494,237,688,755,156,766,409,514,576,593,754,378,30,608,868,76,466,521,752,756,15,385,448,267,161,465,12,768,797,638,857,82,537,96,310,763,713,648,184,500,179,51,647,53,417,86,12,97,440,210,166,431,375,306,855,715,487,774,494,522,97,262,344,269,337,233,130,398,183,604,302,435,674,341,377,203,598,203,467,67,334,672,596,362,872,32,139,258,97,399,255,731,396,83,533,253,91,725,785,794,586,449,26,410,470,626,452,748,714,342,493,431,660,639,678,344,824,175,112,266,826,658,123,274,8,589,481,709,326,619,834,795,588,811,519,669,539,789,358,796,752,128,341,519,514,742,732,715,91,324,503,820,766,790,292,808,507,453,276,104,365,79,38,750,458,146,561,426,75,388,122,661,459,696,110,385,410,589,749,391,526,218,411,182,480,361,715,338,687,251,816,76,734,690,850,201,132,351,530,15,49,573,16,807,609,705,445,715,797,812,86,283,327,710,137,753,294,361,712,39,373,318,435,755,755,383,800,460,841,847,475,313,138,597,640,583,557,416,569,598,48,54,574,183,473,666,439,225,683,751,235,542,21,356,33,670,80,349,285,281,291,816,773,382,832,254};

        int[] re = new withinThreeJumps().withinThreeJumps(a,b,c,d);
        System.out.println(re.length);
    }

    public int[] withinThreeJumps(int[] a, int[] b, int[] c, int[] d) {
        // Write your code here

        HashMap<Integer, List<Integer>> map = new HashMap<>();

        for (int i = 0; i < a.length; i++) {
            List<Integer> ii = map.get(a[i]);
            if (ii==null) {
                ii=new ArrayList<>();
                map.put(a[i],ii);
            }

            List<Integer> ii2 = map.get(b[i]);
            if (ii2==null) {
                ii2=new ArrayList<>();
                map.put(b[i],ii2);
            }

            ii.add(b[i]);
            ii2.add(a[i]);
        }

        int[] result = new int[c.length];
        for (int i = 0; i < c.length; i++) {
            int rr = withinThreeJump(map, c[i], d[i], 0);
            if (rr>0 && rr<=3) {
                result[i]=1;
            }
        }

        return result;
    }

    public int withinThreeJump(HashMap<Integer, List<Integer>> map, int begin, int target, int jump) {
        if (map.get(begin)==null || jump>3) {
            return 0;
        }

        List<Integer> friends = map.get(begin);
        int finalResult = Integer.MAX_VALUE;
        for (Integer i:friends) {
            if (i==target) {
                finalResult = Math.min(finalResult, jump+1);
            } else {
                int iiij = withinThreeJump(map, i, target, jump + 1);
                if (iiij > 0) {
                    finalResult = Math.min(finalResult, iiij);
                }
            }
        }

        return finalResult==Integer.MAX_VALUE?0:finalResult;
    }

}
